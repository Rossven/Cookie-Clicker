{"ast":null,"code":"class Game {\n  constructor() {\n    this.demandRate = 0;\n    this.material = 2000;\n    this.money = 28000;\n    this.price = 10;\n    this.currentCigKofte = 0;\n    this.manufacturedCigKofte = 2000;\n    this.soldCigKofte = 0;\n    this.unitMaterialCost = 100;\n    this.lastManufacturedCount = 0;\n    this.lastManufacturedRate = 0;\n    this.lastManufacturedRateTs = Date.now();\n    this.materialCost = 500;\n    this.materialCostLastUpdated = Date.now();\n    this.autoGenerators = {\n      errandBoy: 0,\n      errandBoyCost: 1000,\n      errandBoyManufactureRate: 1,\n      foreman: 0,\n      foremanCost: 5000,\n      foremanManufactureRate: 6,\n      master: 0,\n      masterCost: 20000,\n      masterManufactureRate: 15\n    };\n    this.autoGeneratorsLastGeneratedAt = Date.now();\n    this.hasAutoBuyer = false;\n    this.isAutoBuyerActive = false;\n    this.autoBuyerCost = 15000;\n\n    this.makeCigKofte = (count = 1) => {\n      if (this.canMakeCigKofte(count)) {\n        this.currentCigKofte += count;\n        this.manufacturedCigKofte += count;\n        this.material -= this.unitMaterialCost * count;\n      }\n    };\n\n    this.update = () => {\n      // generate new goods\n      if (Date.now() - this.autoGeneratorsLastGeneratedAt > 1000) {\n        this.makeCigKofte(this.autoGenerators.errandBoy * this.autoGenerators.errandBoyManufactureRate);\n        this.makeCigKofte(this.autoGenerators.foreman * this.autoGenerators.foremanManufactureRate);\n        this.makeCigKofte(this.autoGenerators.master * this.autoGenerators.masterManufactureRate);\n        this.autoGeneratorsLastGeneratedAt = Date.now();\n      } // auto buyer\n\n\n      if (this.isAutoBuyerActive && this.material < this.errandBoy * 100 + this.master * 1500 + this.foreman * 600 && this.canBuyMaterial()) {\n        this.buyMaterial();\n      } // update material cost\n\n\n      if (Date.now() - this.materialCostLastUpdated > 10000) {\n        this.materialCost = Math.floor(Math.random() * 300 + 300);\n        this.materialCostLastUpdated = Date.now();\n      } // update manufacture rate\n\n\n      if (Date.now() - this.lastManufacturedRateTs > 5000) {\n        this.lastManufacturedRateTs = Date.now();\n        this.lastManufacturedRate = Math.floor((this.manufacturedCigKofte - this.lastManufacturedCount) / 5);\n        this.lastManufacturedCount = this.manufacturedCigKofte;\n      } // update demand\n\n\n      this.updateDemand(); // consumers purchase goods\n\n      if (this.currentCigKofte > 0 && Math.random() * 100 < this.demandRate) {\n        this.purchaseCigKofte();\n      }\n    };\n\n    this.updateDemand = () => {\n      let rate;\n\n      if (this.price <= 40) {\n        rate = 2 / Math.sqrt(this.price) * 100;\n      } else {\n        const maxRate = 2 / Math.sqrt(40) * 100; // 40tl 20%\n        // 60tl 0%\n\n        rate = maxRate * (60 - this.price) / 20;\n      }\n\n      this.demandRate = Math.floor(Math.max(0, rate));\n    };\n\n    this.purchaseCigKofte = () => {\n      this.currentCigKofte -= 1;\n      this.money += this.price;\n    };\n\n    this.startAutoBuyer = () => {\n      if (this.hasAutoBuyer) {\n        this.isAutoBuyerActive = true;\n      }\n    };\n\n    this.stopAutoBuyer = () => {\n      this.isAutoBuyerActive = false;\n    };\n\n    this.didUnlockAutoBuyer = () => {\n      return this.manufacturedCigKofte > 2000;\n    };\n\n    this.canBuyAutoBuyer = () => {\n      return this.didUnlockAutoBuyer() && this.money >= this.autoBuyerCost;\n    };\n\n    this.canBuyAutoGenerator = type => {\n      switch (type) {\n        case \"ERRAND_BOY\":\n          return this.money >= this.autoGenerators.errandBoyCost;\n\n        case \"FOREMAN\":\n          return this.money >= this.autoGenerators.foremanCost;\n\n        case \"MASTER\":\n          return this.money >= this.autoGenerators.masterCost;\n\n        default:\n          return false;\n      }\n    };\n\n    this.canBuyMaterial = () => {\n      return this.money >= this.materialCost;\n    };\n\n    this.canMakeCigKofte = (count = 1) => {\n      return this.material >= this.unitMaterialCost * count;\n    };\n\n    this.canDecreasePrice = () => {\n      return this.price > 1;\n    };\n\n    this.buyMaterial = () => {\n      if (!this.canBuyMaterial()) {\n        return;\n      }\n\n      this.materialCost += Math.floor(Math.random() * 20 + 10);\n      this.materialCostLastUpdated = Date.now();\n      this.material += 10000;\n      this.money -= this.materialCost;\n    };\n\n    this.buyAutoBuyer = () => {\n      if (!this.canBuyAutoBuyer()) {\n        return;\n      }\n\n      this.money -= this.autoBuyerCost;\n      this.hasAutoBuyer = true;\n      this.isAutoBuyerActive = true;\n    };\n\n    this.buyAutoGenerator = type => {\n      if (!this.canBuyAutoGenerator(type)) {\n        return;\n      }\n\n      switch (type) {\n        case \"ERRAND_BOY\":\n          this.autoGenerators.errandBoy++;\n          this.money -= this.autoGenerators.errandBoyCost;\n          this.autoGenerators.errandBoyCost += Math.floor(this.autoGenerators.errandBoyCost / 100 * 10);\n          return;\n\n        case \"FOREMAN\":\n          this.autoGenerators.foreman++;\n          this.money -= this.autoGenerators.foremanCost;\n          this.autoGenerators.foremanCost += Math.floor(this.autoGenerators.foremanCost / 100 * 10);\n          return;\n\n        case \"MASTER\":\n          this.autoGenerators.master++;\n          this.money -= this.autoGenerators.masterCost;\n          this.autoGenerators.masterCost += Math.floor(this.autoGenerators.masterCost / 100 * 10);\n          return;\n\n        default:\n          return false;\n      }\n    };\n\n    this.increasePrice = () => {\n      this.price += 1;\n    };\n\n    this.decreasePrice = () => {\n      if (this.price === 1) {\n        return;\n      }\n\n      this.price -= 1;\n    };\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["C:/Users/ATAKAN/Desktop/clicker-game-master/src/game.js"],"names":["Game","demandRate","material","money","price","currentCigKofte","manufacturedCigKofte","soldCigKofte","unitMaterialCost","lastManufacturedCount","lastManufacturedRate","lastManufacturedRateTs","Date","now","materialCost","materialCostLastUpdated","autoGenerators","errandBoy","errandBoyCost","errandBoyManufactureRate","foreman","foremanCost","foremanManufactureRate","master","masterCost","masterManufactureRate","autoGeneratorsLastGeneratedAt","hasAutoBuyer","isAutoBuyerActive","autoBuyerCost","makeCigKofte","count","canMakeCigKofte","update","canBuyMaterial","buyMaterial","Math","floor","random","updateDemand","purchaseCigKofte","rate","sqrt","maxRate","max","startAutoBuyer","stopAutoBuyer","didUnlockAutoBuyer","canBuyAutoBuyer","canBuyAutoGenerator","type","canDecreasePrice","buyAutoBuyer","buyAutoGenerator","increasePrice","decreasePrice"],"mappings":"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","sourcesContent":["class Game {\n  demandRate = 0;\n  material = 2000;\n  money = 28000;\n  price = 10;\n  currentCigKofte = 0;\n  manufacturedCigKofte = 2000;\n  soldCigKofte = 0;\n  unitMaterialCost = 100;\n\n  // manufacture rate\n  lastManufacturedCount = 0;\n  lastManufacturedRate = 0;\n  lastManufacturedRateTs = Date.now();\n\n  // price of the material\n  materialCost = 500;\n  materialCostLastUpdated = Date.now();\n\n  // generators\n  autoGenerators = {\n    errandBoy: 0,\n    errandBoyCost: 1000,\n    errandBoyManufactureRate: 1,\n    foreman: 0,\n    foremanCost: 5000,\n    foremanManufactureRate: 6,\n    master: 0,\n    masterCost: 20000,\n    masterManufactureRate: 15\n  };\n  autoGeneratorsLastGeneratedAt = Date.now();\n\n  // auto buyer\n  hasAutoBuyer = false;\n  isAutoBuyerActive = false;\n  autoBuyerCost = 15000;\n\n  makeCigKofte = (count = 1) => {\n    if (this.canMakeCigKofte(count)) {\n      this.currentCigKofte += count;\n      this.manufacturedCigKofte += count;\n      this.material -= this.unitMaterialCost * count;\n    }\n  };\n\n  update = () => {\n    // generate new goods\n    if (Date.now() - this.autoGeneratorsLastGeneratedAt > 1000) {\n      this.makeCigKofte(\n        this.autoGenerators.errandBoy *\n          this.autoGenerators.errandBoyManufactureRate\n      );\n      this.makeCigKofte(\n        this.autoGenerators.foreman * this.autoGenerators.foremanManufactureRate\n      );\n      this.makeCigKofte(\n        this.autoGenerators.master * this.autoGenerators.masterManufactureRate\n      );\n      this.autoGeneratorsLastGeneratedAt = Date.now();\n    }\n\n    // auto buyer\n    if (\n      this.isAutoBuyerActive &&\n      this.material <\n        this.errandBoy * 100 + this.master * 1500 + this.foreman * 600 &&\n      this.canBuyMaterial()\n    ) {\n      this.buyMaterial();\n    }\n\n    // update material cost\n    if (Date.now() - this.materialCostLastUpdated > 10000) {\n      this.materialCost = Math.floor(Math.random() * 300 + 300);\n      this.materialCostLastUpdated = Date.now();\n    }\n\n    // update manufacture rate\n    if (Date.now() - this.lastManufacturedRateTs > 5000) {\n      this.lastManufacturedRateTs = Date.now();\n      this.lastManufacturedRate = Math.floor(\n        (this.manufacturedCigKofte - this.lastManufacturedCount) / 5\n      );\n      this.lastManufacturedCount = this.manufacturedCigKofte;\n    }\n\n    // update demand\n    this.updateDemand();\n\n    // consumers purchase goods\n    if (this.currentCigKofte > 0 && Math.random() * 100 < this.demandRate) {\n      this.purchaseCigKofte();\n    }\n  };\n\n  updateDemand = () => {\n    let rate;\n    if (this.price <= 40) {\n      rate = (2 / Math.sqrt(this.price)) * 100;\n    } else {\n      const maxRate = (2 / Math.sqrt(40)) * 100;\n      // 40tl 20%\n      // 60tl 0%\n      rate = (maxRate * (60 - this.price)) / 20;\n    }\n    this.demandRate = Math.floor(Math.max(0, rate));\n  };\n\n  purchaseCigKofte = () => {\n    this.currentCigKofte -= 1;\n    this.money += this.price;\n  };\n\n  startAutoBuyer = () => {\n    if (this.hasAutoBuyer) {\n      this.isAutoBuyerActive = true;\n    }\n  };\n  stopAutoBuyer = () => {\n    this.isAutoBuyerActive = false;\n  };\n\n  didUnlockAutoBuyer = () => {\n    return this.manufacturedCigKofte > 2000;\n  };\n\n  canBuyAutoBuyer = () => {\n    return this.didUnlockAutoBuyer() && this.money >= this.autoBuyerCost;\n  };\n\n  canBuyAutoGenerator = type => {\n    switch (type) {\n      case \"ERRAND_BOY\":\n        return this.money >= this.autoGenerators.errandBoyCost;\n      case \"FOREMAN\":\n        return this.money >= this.autoGenerators.foremanCost;\n      case \"MASTER\":\n        return this.money >= this.autoGenerators.masterCost;\n      default:\n        return false;\n    }\n  };\n\n  canBuyMaterial = () => {\n    return this.money >= this.materialCost;\n  };\n\n  canMakeCigKofte = (count = 1) => {\n    return this.material >= this.unitMaterialCost * count;\n  };\n\n  canDecreasePrice = () => {\n    return this.price > 1;\n  };\n\n  buyMaterial = () => {\n    if (!this.canBuyMaterial()) {\n      return;\n    }\n    this.materialCost += Math.floor(Math.random() * 20 + 10);\n    this.materialCostLastUpdated = Date.now();\n\n    this.material += 10000;\n    this.money -= this.materialCost;\n  };\n\n  buyAutoBuyer = () => {\n    if (!this.canBuyAutoBuyer()) {\n      return;\n    }\n    this.money -= this.autoBuyerCost;\n    this.hasAutoBuyer = true;\n    this.isAutoBuyerActive = true;\n  };\n\n  buyAutoGenerator = type => {\n    if (!this.canBuyAutoGenerator(type)) {\n      return;\n    }\n    switch (type) {\n      case \"ERRAND_BOY\":\n        this.autoGenerators.errandBoy++;\n        this.money -= this.autoGenerators.errandBoyCost;\n        this.autoGenerators.errandBoyCost += Math.floor(\n          (this.autoGenerators.errandBoyCost / 100) * 10\n        );\n        return;\n      case \"FOREMAN\":\n        this.autoGenerators.foreman++;\n        this.money -= this.autoGenerators.foremanCost;\n        this.autoGenerators.foremanCost += Math.floor(\n          (this.autoGenerators.foremanCost / 100) * 10\n        );\n        return;\n      case \"MASTER\":\n        this.autoGenerators.master++;\n        this.money -= this.autoGenerators.masterCost;\n        this.autoGenerators.masterCost += Math.floor(\n          (this.autoGenerators.masterCost / 100) * 10\n        );\n        return;\n      default:\n        return false;\n    }\n  };\n\n  increasePrice = () => {\n    this.price += 1;\n  };\n\n  decreasePrice = () => {\n    if (this.price === 1) {\n      return;\n    }\n    this.price -= 1;\n  };\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}